generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id                String          @id @default(uuid())
  reference         String          @unique
  name              String
  color             String?
  country           String?
  region            String?
  appellation       String?
  vintage           Int?
  grapes            String?
  alcoholPercent    Decimal?        @db.Decimal(4,2)
  bottleSizeL       Decimal?        @db.Decimal(4,2)
  sweetness         String?
  tannin            String?
  acidity           String?
  rating            Decimal?        @db.Decimal(5,2)
  priceEur          Decimal?        @db.Decimal(10,2)
  producer          String?
  stockQuantity     Int             @default(0)
  description       String?
  images            ProductImage[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model ProductImage {
  id          String   @id @default(uuid())
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String
  objectKey   String
  contentType String?
  size        BigInt?
  createdAt   DateTime @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?

  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


